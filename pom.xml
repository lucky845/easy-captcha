<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>

    <groupId>io.github.lucky845</groupId>
    <artifactId>easy-captcha</artifactId>
    <version>1.0.3-SNAPSHOT</version>

    <modules>
        <module>easy-captcha-core</module>
        <module>easy-captcha-spring-boot-starter</module>
        <module>easy-captcha-demo</module>
    </modules>

    <name>${project.artifactId}</name>
    <description>依赖管理</description>
    <url>https://github.com/lucky845/easy-captcha</url>

    <developers>
        <developer>
            <id>lucky845</id>
            <name>lucky845</name>
            <url>https://github.com/lucky845</url>
            <email>1447545564@qq.com</email>
            <timezone>8</timezone>
            <roles>
                <role>Project Manager</role>
                <role>Architect</role>
            </roles>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:git@github.com:lucky845/easy-captcha.git</connection>
        <developerConnection>scm:git:git@github.com:lucky845/easy-captcha.git</developerConnection>
        <url>https://github.com/lucky845/easy-captcha/tree/master</url>
    </scm>

    <licenses>
        <license>
            <name>Apache License 2.0</name>
            <url>https://www.apache.org/licenses</url>
        </license>
    </licenses>

    <properties>
        <server.id.value>central</server.id.value>
        <!-- properties -->
        <java.version>21</java.version>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- plugins version -->
        <maven.compiler.plugin.version>3.14.0</maven.compiler.plugin.version>
        <maven.resource.plugin.version>3.3.1</maven.resource.plugin.version>
        <maven.jar.plugin.version>3.4.2</maven.jar.plugin.version>
        <maven.surefire.plugin.version>3.5.3</maven.surefire.plugin.version>
        <maven.spring.boot.plugin.version>3.4.1</maven.spring.boot.plugin.version>
        <maven.versions.plugin.version>2.18.0</maven.versions.plugin.version>
        <maven.javadoc.plugin.version>3.11.3</maven.javadoc.plugin.version>
        <maven.source.plugin.version>2.4</maven.source.plugin.version>
        <maven.deploy.plugin.version>3.1.4</maven.deploy.plugin.version>

        <!-- dependencies version -->
        <lombok.version>1.18.38</lombok.version>
        <spring-boot.version>3.5.5</spring-boot.version>
        <transmittable-thread-local.version>2.14.5</transmittable-thread-local.version>
    </properties>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>transmittable-thread-local</artifactId>
                <version>${transmittable-thread-local.version}</version>
            </dependency>

            <!-- 依赖管理 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>io.github.lucky845</groupId>
                <artifactId>easy-captcha-core</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>io.github.lucky845</groupId>
                <artifactId>easy-captcha-spring-boot-starter</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <repositories>
        <repository>
            <id>aliyun</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <name>Central Portal Snapshots</name>
            <id>central-portal-snapshots</id>
            <url>https://central.sonatype.com/repository/maven-snapshots/</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>aliyun-plugin</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>

        <pluginManagement>
            <plugins>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                        <encoding>${project.build.sourceEncoding}</encoding>
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>

                <!-- 资源插件 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven.resource.plugin.version}</version>
                    <configuration>
                        <!-- 后缀为ttf的字体文件 -->
                        <nonFilteredFileExtensions>
                            <nonFilteredFileExtension>ttf</nonFilteredFileExtension>
                        </nonFilteredFileExtensions>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven.jar.plugin.version}</version>
                    <configuration>
                        <archive>
                            <!-- 生成的jar中，不包含pom.xml和pom.properties这两个文件 -->
                            <addMavenDescriptor>false</addMavenDescriptor>
                            <!-- 生成MANIFEST.MF的设置 -->
                            <manifest>
                                <!--这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库
                                下面可能会有多个包，并且只有一个是正确的，其余的可能是带时间戳的，
                                此时会在classpath下面把那个带时间戳的给添加上去，
                                然后我们 在依赖打包的时候，打的是正确的，所以两头会对不上，报错。 -->
                                <useUniqueVersions>false</useUniqueVersions>
                                <!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
                                <addClasspath>true</addClasspath>
                                <addBuildEnvironmentEntries>true</addBuildEnvironmentEntries>
                                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                                <!-- 这个jar所依赖的jar包添加classPath的时候的前缀，如果这个jar本身
                                和依赖包在同一级目录，则不需要添加 -->
                                <!--                                <classpathPrefix>lib/</classpathPrefix>-->
                                <!-- jar启动入口类 -->
                                <!--                                <mainClass>com.ht.pojo.Test</mainClass>-->
                            </manifest>
                            <!--                            <manifestEntries>-->
                            <!--                                &lt;!&ndash; 在Class-Path下添加配置文件的路径 &ndash;&gt;-->
                            <!--                                <Class-Path>../config/</Class-Path>-->
                            <!--                                &lt;!&ndash; 假如这个项目可能要引入一些外部资源，但是你打包的时候并不想把-->
                            <!--                                这些资源文件打进包里面，这个时候你必须在这边额外指定一些这些资源-->
                            <!--                                文件的路径，这个位置指定的话，要根据你预期的这些位置去设置，我这边-->
                            <!--                                所有jar都在lib下，资源文件都在config下，lib和config是同级的-->
                            <!--                                同时还需要注意另外一个问题，假如你的pom文件里面配置了-->
                            <!--                                <scope>system</scope>,就是你依赖是你本地的资源，这个时候使用-->
                            <!--                                这个插件，classPath里面是不会添加，所以你得手动把这个依赖添加进-->
                            <!--                                这个地方，用空格隔开就行 &ndash;&gt;-->
                            <!--                            </manifestEntries>-->
                        </archive>
                        <!-- jar包的位置 -->
                        <!--                        <outputDirectory>${project.build.directory}/lib</outputDirectory>-->
                        <includes>
                            <!-- 打jar包时，打包class文件和config目录下面的 properties文件 -->
                            <!-- 有时候可能需要一些其他文件，这边可以配置，包括剔除的文件等等 -->
                            <include>**/*.class</include>
                            <include>**/*.properties</include>
                        </includes>
                    </configuration>
                </plugin>

                <plugin>
                    <!--打包跳过测试-->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.plugin.version}</version>
                    <configuration>
                        <skipTests>true</skipTests>
                        <skip>true</skip>
                    </configuration>
                </plugin>

                <!-- 一键更新子模块版本号 使用方法如下: -->
                <!-- # 显示所有的依赖更新-->
                <!-- mvn versions:display-dependency-updates-->
                <!-- # 显示项目的插件更新-->
                <!-- mvn versions:display-plugin-updates-->
                <!-- # 显示项目的属性更新-->
                <!-- mvn versions:display-property-updates-->
                <!-- # 设置项目版本号-->
                <!-- mvn versions:set -DnewVersion=1.0.1-SNAPSHOT -DgenerateBackupPoms=true-->
                <!-- # 设置属性版本号-->
                <!-- mvn versions:set-property -Dproperty=tsollu.version -DnewVersion=1.0.1-SNAPSHOT -DgenerateBackupPoms=true-->
                <!-- # 移除 pom.xml.versionsBackup 备份文件-->
                <!-- mvn versions:commit-->
                <!-- # 基于 pom.xml.versionsBackup 备份文件回滚-->
                <!-- mvn versions:revert-->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${maven.versions.plugin.version}</version>
                    <configuration>
                        <generateBackupPoms>false</generateBackupPoms>
                    </configuration>
                </plugin>

                <plugin>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven.javadoc.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>attach-javadoc</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!-- utf-8读取文件 -->
                        <charset>UTF-8</charset>
                        <!-- utf-8进行编码代码 -->
                        <encoding>UTF-8</encoding>
                        <!-- utf-8进行编码文档 -->
                        <docencoding>UTF-8</docencoding>
                        <additionalJOptions>
                            <additionalJOption>-J-Duser.language=en</additionalJOption>
                            <additionalJOption>-J-Duser.country=US</additionalJOption>
                            <additionalJOption>-Xdoclint:none</additionalJOption>
                        </additionalJOptions>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${maven.deploy.plugin.version}</version>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <plugin>
                <!--打包跳过测试-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>

            <!-- 资源插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
            </plugin>

            <!-- 一键更新子模块版本号 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <configuration>
                    <generateBackupPoms>false</generateBackupPoms>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>

        <profile>
            <id>develop</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <repositories>
                <repository>
                    <id>aliyun</id>
                    <name>aliyun</name>
                    <url>https://maven.aliyun.com/repository/public/</url>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>aliyun-plugin</id>
                    <url>https://maven.aliyun.com/repository/public</url>
                </pluginRepository>
            </pluginRepositories>
        </profile>

        <profile>
            <id>github</id>

            <distributionManagement>
                <repository>
                    <id>github</id>
                    <name>GitHub Packages</name>
                    <url>https://maven.pkg.github.com/lucky845/easy-captcha</url>
                </repository>
            </distributionManagement>

            <build>
                <plugins>

                    <!-- Javadoc -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>3.11.3</version>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!--Maven编译插件-->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>${maven.source.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>

        </profile>

        <profile>
            <id>release</id>

            <build>
                <plugins>

                    <!-- Javadoc -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>3.11.3</version>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- GPG -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>3.2.7</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                        <!--                        <configuration>-->
                        <!--                            <gpgArguments>-->
                        <!--                                <arg>&#45;&#45;pinentry-mode</arg>-->
                        <!--                                <arg>loopback</arg>-->
                        <!--                            </gpgArguments>-->
                        <!--                        </configuration>-->
                    </plugin>

                    <!--用于与 center 仓库进行集成，方便在 Maven 构建过程中进行部署和发布操作-->
                    <plugin>
                        <groupId>org.sonatype.central</groupId>
                        <artifactId>central-publishing-maven-plugin</artifactId>
                        <version>0.8.0</version>
                        <extensions>true</extensions>
                        <configuration>
                            <publishingServerId>${server.id.value}</publishingServerId>
                            <autoPublish>true</autoPublish>
                            <checksums>required</checksums>
                        </configuration>
                    </plugin>

                    <!--Maven编译插件-->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>${maven.source.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>
    </profiles>

    <reporting>
        <plugins>
            <plugin>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <encoding>utf-8</encoding>
                    <charset>utf-8</charset>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

</project>
