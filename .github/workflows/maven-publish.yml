name: Maven Package & Release

on:
  pull_request:
    branches: [ "master" ]
    types: [ closed ]
  release:
    types: [ created ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      # 🔧 精准缓存策略（多模块项目适用）
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-
            ${{ runner.os }}-maven-*

      # 🐛 设置 JDK 环境
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # ⚙️ 构建与基础测试
      - name: Build project
        run: mvn clean verify -B --file pom.xml

      # 📊 生成依赖树（可选）
      - name: Show dependency tree
        run: mvn dependency:tree -DoutputFile=dependency-tree.txt | tee dependency-tree.txt

  publish-package:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    if: |
      github.event_name == 'release' &&
      github.event.release.tag_name =~ ^\d+\.\d+\.\d+$

    steps:
      - uses: actions/checkout@v4

      # 🔧 复用构建缓存
      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-
            ${{ runner.os }}-maven-*

      # 🛠️ 执行发布
      - name: Build and publish
        run: mvn --batch-mode deploy -s $GITHUB_WORKSPACE/settings.xml -P github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_OPTS: "-Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }}"

      # ✅ 版本验证
      - name: Verify published artifact
        run: |
          curl -s https://api.github.com/packages/github.com/${{ github.repository }}/maven/v1/packages/${{ github.event.release.tag_name }}/version \
          | jq '.version' | grep -q "^${{ github.event.release.tag_name }}\$"

      # 📢 发布通知
      - name: Send release notification
        uses: some-notification-action@v1
        with:
          message: "Release ${github.event.release.tag_name} has been successfully published 🎉"
